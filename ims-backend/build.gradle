buildscript {
    dependencies {
        classpath 'org.postgresql:postgresql:42.3.1'
    }
}

plugins {
    id "application"
    id "org.flywaydb.flyway" version "8.0.5"
}

application {
    mainClass = 'org.am.Main'
}

repositories {
    mavenCentral()
}
sourceSets {
    qaTest {
        java {
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
            srcDir file('src/qa-test/java')
        }
        resources.srcDir file('src/qa-test/resources')
    }
}

configurations {
    qaTestImplementation.extendsFrom(testImplementation)
    qaTestCompile.extendsFrom testCompile
    qaTestRunTime.extendsFrom testRuntime

}

task qaTest(type: Test) {
    description = "Run integration tests"
    testClassesDirs = sourceSets.qaTest.output.classesDirs
    classpath = sourceSets.qaTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

flyway {
    url = project.hasProperty('url') ? project.getProperty('url') : 'jdbc:postgresql://localhost:5432/ims'
    user = project.hasProperty('user') ? project.getProperty('user') : 'postgres'
    password = project.hasProperty('password') ? project.getProperty('password') : 'postgres'
    table = 'flyway_schema_history'
    baselineOnMigrate = true
    locations = ['classpath:db/migration']
}

dependencies {
    compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    compile group: 'org.apache.commons', name: 'commons-text', version: commonsTextVersion
    compileOnly group: 'org.apache.commons', name: 'commons-exec', version: commonsExecVersion
    compileOnly group: 'commons-io', name: 'commons-io', version: commonsIOversion

    testImplementation group: 'junit', name: 'junit', version: jUnit4Version
    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: javaxmlBindingApiVersion
    implementation group: 'org.apache.kafka', name: 'kafka-clients', version: kafkaVersion
    implementation group: 'com.jayway.jsonpath', name: 'json-path', version: jsonPathVersion

    // Spring doc
    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: springDocVersion

    //Spring
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: springBootVersion
    compile group: 'org.springframework.kafka', name: 'spring-kafka', version: springKafkaVersion

    // Data sources
    implementation group: 'org.postgresql', name: 'postgresql', version: postgresqlVersion

    //Hibernate
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: jacksonDatatypeJSR310
    implementation group: 'com.vladmihalcea', name: 'hibernate-types-52', version: hibernateTypes52Version

    // Validation
    implementation group: 'org.hibernate', name: 'hibernate-validator', version: hibernateValidatorVersion
    implementation group: 'org.mapstruct', name: 'mapstruct', version: mapstructVersion

    //Query DSL
    implementation group: 'com.querydsl', name: 'querydsl-jpa', version: queryDslVersion

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
    implementation group: 'javax.validation', name: 'validation-api', version: javaxValidationApi
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springBootVersion
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: springBootVersion

    // Second-level Caching
    implementation group: 'com.hazelcast', name: 'hazelcast', version: '5.0'
    implementation group: 'com.hazelcast', name: 'hazelcast-hibernate53', version: '2.2.1'

    //Annotation Processors
    annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: springBootVersion
    annotationProcessor("com.querydsl:querydsl-apt:$queryDslVersion:jpa")
    annotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: mapstructVersion
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion

    testCompileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion

    //Junit Jupiter
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: jUnitJupiterVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: jUnitJupiterVersion

    testImplementation group: 'org.flywaydb', name: 'flyway-core', version: flywayVersion
    testImplementation group: 'org.reflections', name: 'reflections', version: reflectionsVersion
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: springBootVersion
    testImplementation group: 'com.github.javafaker', name: 'javafaker', version: javaFakerVersion
    //Cucumber
    testImplementation group: 'io.cucumber', name: 'cucumber-java', version: cucumberVersion
    testImplementation group: 'io.cucumber', name: 'cucumber-core', version: cucumberVersion
    testImplementation group: 'io.cucumber', name: 'cucumber-junit', version: cucumberJunitVersion

    //Test Containers
    testImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: testContainersVersion
    testImplementation group: 'org.testcontainers', name: 'postgresql', version: testContainersVersion
    testImplementation group: 'org.testcontainers', name: 'testcontainers', version: testContainersVersion
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: mockitoJunitJupiterVersion

    //Rest Assured
    testImplementation group: 'io.rest-assured', name: 'rest-assured', version: restAssuredVersion

}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        //exceptionFormat = 'full'
        // howStandardStreams = true
    }
    //  finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            limit {
                minimum = 0.6
            }
        }
    }
}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

task cucumber() {
    dependsOn assemble, testClasses
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.qaTest.output
            args = [
                    '--plugin', 'pretty',
                    '--plugin', 'json:build/reports/cucumber.json',
                    '--plugin', 'html:build/reports/cucumber-report.html',
                    '--glue', 'org.am.cucumber.stepdefinition',
                    'src/qa-test/resources/features/']
        }
    }
}

flywayMigrate.dependsOn classes
